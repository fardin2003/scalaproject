package com.code.project;

public class helloworld {

	public static void main(String[] args) {
		System.out.println("slipsscala"
				+ "fardin"
				+ "FY MCS  SCALA  PRACTICAL  SOLVED  SLIPS\r\n"
				+ "\r\n"
				+ "\r\n"
				+ "SLIP 1-Q1\r\n"
				+ "\r\n"
				+ " Write a program for multiplication of two matrices. Find determinant of resultant matrix. (Accept matrix: 5M Multiplication : 10M Determinant : 10M Display : 5M)\r\n"
				+ "\r\n"
				+ "\r\n"
				+ "object Sample {\r\n"
				+ "  def main(args: Array[String]) {\r\n"
				+ "    var Matrix1 = Array.ofDim[Int](2, 2)\r\n"
				+ "    var Matrix2 = Array.ofDim[Int](2, 2)\r\n"
				+ "    var Matrix3 = Array.ofDim[Int](2, 2)\r\n"
				+ "\r\n"
				+ "    var i: Int = 0\r\n"
				+ "    var j: Int = 0\r\n"
				+ "    var k: Int = 0\r\n"
				+ "\r\n"
				+ "    var sum: Int = 0\r\n"
				+ "\r\n"
				+ "    printf(\"Enter elements of MATRIX1:\\n\")\r\n"
				+ "    i = 0;\r\n"
				+ "    while (i < 2) {\r\n"
				+ "      j = 0;\r\n"
				+ "      while (j < 2) {\r\n"
				+ "        printf(\"ELEMENT(%d)(%d): \", i, j);\r\n"
				+ "        Matrix1(i)(j) = scala.io.StdIn.readInt();\r\n"
				+ "        j = j + 1;\r\n"
				+ "      }\r\n"
				+ "      i = i + 1;\r\n"
				+ "    }\r\n"
				+ "\r\n"
				+ "    printf(\"Enter elements of MATRIX2:\\n\")\r\n"
				+ "    i = 0;\r\n"
				+ "    while (i < 2) {\r\n"
				+ "      j = 0;\r\n"
				+ "      while (j < 2) {\r\n"
				+ "        printf(\"ELEMENT(%d)(%d): \", i, j);\r\n"
				+ "        Matrix2(i)(j) = scala.io.StdIn.readInt();\r\n"
				+ "        j = j + 1;\r\n"
				+ "      }\r\n"
				+ "      i = i + 1;\r\n"
				+ "    }\r\n"
				+ "\r\n"
				+ "    //Multiply Matrix1 and Matrix2\r\n"
				+ "    i = 0;\r\n"
				+ "    while (i < 2) {\r\n"
				+ "      j = 0;\r\n"
				+ "      while (j < 2) {\r\n"
				+ "        sum = 0;\r\n"
				+ "        k = 0;\r\n"
				+ "        while (k < 2) {\r\n"
				+ "          sum = sum + (Matrix1(i)(k) * Matrix2(k)(j));\r\n"
				+ "          k = k + 1;\r\n"
				+ "        }\r\n"
				+ "        Matrix3(i)(j) = sum;\r\n"
				+ "        j = j + 1;\r\n"
				+ "      }\r\n"
				+ "      i = i + 1;\r\n"
				+ "    }\r\n"
				+ "\r\n"
				+ "    printf(\"MATRIX1:\\n\")\r\n"
				+ "    i = 0;\r\n"
				+ "    while (i < 2) {\r\n"
				+ "      j = 0;\r\n"
				+ "      while (j < 2) {\r\n"
				+ "        printf(\"%d \", Matrix1(i)(j));\r\n"
				+ "        j = j + 1;\r\n"
				+ "      }\r\n"
				+ "      i = i + 1;\r\n"
				+ "      println();\r\n"
				+ "    }\r\n"
				+ "\r\n"
				+ "    printf(\"MATRIX2:\\n\")\r\n"
				+ "    i = 0;\r\n"
				+ "    while (i < 2) {\r\n"
				+ "      j = 0;\r\n"
				+ "      while (j < 2) {\r\n"
				+ "        printf(\"%d \", Matrix2(i)(j));\r\n"
				+ "        j = j + 1;\r\n"
				+ "      }\r\n"
				+ "      i = i + 1;\r\n"
				+ "      println();\r\n"
				+ "    }\r\n"
				+ "\r\n"
				+ "    printf(\"Multiplication of Matrix1 and Matrix2:\\n\")\r\n"
				+ "    i = 0;\r\n"
				+ "    while (i < 2) {\r\n"
				+ "      j = 0;\r\n"
				+ "      while (j < 2) {\r\n"
				+ "        printf(\"%d \", Matrix3(i)(j));\r\n"
				+ "        j = j + 1;\r\n"
				+ "      }\r\n"
				+ "      i = i + 1;\r\n"
				+ "      println();\r\n"
				+ "    }\r\n"
				+ "  }\r\n"
				+ "}\r\n"
				+ "-:OUTPUT:-\r\n"
				+ "arihant@arihant-System-Product-Name:~$ scalac Sample.scala\r\n"
				+ "arihant@arihant-System-Product-Name:~$ scala Sample\r\n"
				+ "Enter elements of MATRIX1:\r\n"
				+ "ELEMENT(0)(0): 2\r\n"
				+ "ELEMENT(0)(1): 3\r\n"
				+ "ELEMENT(1)(0): 5\r\n"
				+ "ELEMENT(1)(1): 4\r\n"
				+ "Enter elements of MATRIX2:\r\n"
				+ "ELEMENT(0)(0): 1\r\n"
				+ "ELEMENT(0)(1): 3\r\n"
				+ "ELEMENT(1)(0): 4\r\n"
				+ "ELEMENT(1)(1): 7\r\n"
				+ "MATRIX1:\r\n"
				+ "2 3\r\n"
				+ "5 4\r\n"
				+ "MATRIX2:\r\n"
				+ "1 3\r\n"
				+ "4 7\r\n"
				+ "Multiplication of Matrix1 and Matrix2:\r\n"
				+ "14 27\r\n"
				+ "21 43\r\n"
				+ "SLIP 2-Q1\r\n"
				+ "Write a program to read two strings. Find the occurrence of second string in the first string. Reverse the case of each occurrence in the string and display resultant string. (read : 5M find occurance:10M reverse : 10M display: 5M)\r\n"
				+ "\r\n"
				+ "import scala.io.StdIn._\r\n"
				+ "import scala.io.StdIn.{readLine}\r\n"
				+ "object str2\r\n"
				+ "{\r\n"
				+ " def main(args: Array[String])\r\n"
				+ " {\r\n"
				+ " println(\"Enter the first string:\");\r\n"
				+ " var str1=readLine()\r\n"
				+ " println(\"Enter second String:\")\r\n"
				+ " var str2=readLine()\r\n"
				+ " if(str1.contains(str2))\r\n"
				+ " println(\"second string is present in first string\")\r\n"
				+ " else\r\n"
				+ " println(\"not present\")\r\n"
				+ " var newstr = str2.reverse\r\n"
				+ " println(\"string after reversing the occurence:\"+newstr)\r\n"
				+ " }\r\n"
				+ "}\r\n"
				+ "-:OUTPUT:-\r\n"
				+ "arihant@arihant-System-Product-Name:~$ scalac  str2.scala\r\n"
				+ "arihant@arihant-System-Product-Name:~$ scala str2\r\n"
				+ "Enter the first string:\r\n"
				+ "atika\r\n"
				+ "Enter second String:\r\n"
				+ "atika\r\n"
				+ "second string is present in first string\r\n"
				+ "string after reversing the occurence:akita\r\n"
				+ "\r\n"
				+ "SLIP3-Q1.[A]\r\n"
				+ "Write a program to read five random numbers and convert it\r\n"
				+ "to binary and octal using user defined functions.\r\n"
				+ "(random number : 5M binary : 5M Octal : 5M)\r\n"
				+ "B. Write a program to calculate average of all prime numbers\r\n"
				+ "between n1 and n2 (take n1 and n2 from user).\r\n"
				+ "(accept n1, n2 : 5M prime numbers : 5M average :5M)\r\n"
				+ "object slip2a\r\n"
				+ "{\r\n"
				+ "def binary(n:Int):String=\r\n"
				+ "{\r\n"
				+ "var n1:Int=n\r\n"
				+ "var s:String=\"\"\r\n"
				+ "while(n1>0)\r\n"
				+ "{\r\n"
				+ "s=s.concat((n1%2).toString())\r\n"
				+ "n1= n1/2\r\n"
				+ "}\r\n"
				+ "return s.reverse\r\n"
				+ "}\r\n"
				+ "def octal(n:Int):String=\r\n"
				+ "{\r\n"
				+ "var n1:Int=n\r\n"
				+ "var s:String=\"\"\r\n"
				+ "while(n1>0)\r\n"
				+ "{\r\n"
				+ "s=s.concat((n1%8).toString())\r\n"
				+ "n1= n1/8\r\n"
				+ "}\r\n"
				+ "return s.reverse\r\n"
				+ "}\r\n"
				+ "def main(args:Array[String]):Unit=\r\n"
				+ "{\r\n"
				+ "println(\"Enter 5 random numbers:\")\r\n"
				+ "var rand=scala.util.Random\r\n"
				+ "var arr:Array[Int]=new Array[Int](5)\r\n"
				+ "for(i<- 0 to 4)\r\n"
				+ "{\r\n"
				+ "arr(i)=rand.nextInt(100)\r\n"
				+ "println(\"Number \"+i+\" of \"+arr(i)+\" in binary is:\"+binary(arr(i)))\r\n"
				+ "println(\"Number \"+i+\" of \"+arr(i)+\" in octal is:\"+octal(arr(i)))\r\n"
				+ "}\r\n"
				+ "/*println(\"enter a number:\")\r\n"
				+ "var n=scala.io.StdIn.readInt()\r\n"
				+ "println(binary(n))\r\n"
				+ "println(octal(n))\r\n"
				+ "*/\r\n"
				+ "}\r\n"
				+ "}\r\n"
				+ "-:OUTPUT:-\r\n"
				+ "arihant@arihant-System-Product-Name:~$ scalac slip2a.scala\r\n"
				+ "arihant@arihant-System-Product-Name:~$ scala slip2a\r\n"
				+ "Enter 5 random numbers:\r\n"
				+ "Number 0 of 68 in binary is:1000100\r\n"
				+ "Number 0 of 68 in octal is:104\r\n"
				+ "Number 1 of 0 in binary is:\r\n"
				+ "Number 1 of 0 in octal is:\r\n"
				+ "Number 2 of 79 in binary is:1001111\r\n"
				+ "Number 2 of 79 in octal is:117\r\n"
				+ "Number 3 of 14 in binary is:1110\r\n"
				+ "Number 3 of 14 in octal is:16\r\n"
				+ "Number 4 of 34 in binary is:100010\r\n"
				+ "Number 4 of 34 in octal is:42\r\n"
				+ "\r\n"
				+ "SLIP3-(B)\r\n"
				+ "\r\n"
				+ "object slip2b\r\n"
				+ "{\r\n"
				+ "def isprime(n:Int):Boolean=\r\n"
				+ "{\r\n"
				+ "for(i<-2 to n/2)\r\n"
				+ "{\r\n"
				+ "if(n%i==0) return false\r\n"
				+ "}\r\n"
				+ "return true\r\n"
				+ "}\r\n"
				+ "def main(args:Array[String]):Unit=\r\n"
				+ "{\r\n"
				+ "println(\"Enter n1:\")\r\n"
				+ "var n1:Int=scala.io.StdIn.readInt()\r\n"
				+ "println(\"Enter n2:\")\r\n"
				+ "var n2:Int=scala.io.StdIn.readInt()\r\n"
				+ "var sum=0\r\n"
				+ "var cnt=0\r\n"
				+ "for(i<- n1 to n2)\r\n"
				+ "{\r\n"
				+ "if(isprime(i))\r\n"
				+ "{\r\n"
				+ "sum+=i\r\n"
				+ "cnt+=1\r\n"
				+ "}\r\n"
				+ "}\r\n"
				+ "println(\"count is:\"+cnt)\r\n"
				+ "var result=sum/cnt\r\n"
				+ "println(\"sum of prime numbers between \"+n1+\" and \"+n2+\" is:\"+sum)\r\n"
				+ "printf(\"Average of prime numbers between \"+n1+\" and \"+n2+\" is:\"+result)\r\n"
				+ "}\r\n"
				+ "}\r\n"
				+ "-:OUTPUT:-\r\n"
				+ "arihant@arihant-System-Product-Name:~$ scalac  slip2b.scala\r\n"
				+ "arihant@arihant-System-Product-Name:~$ scala  slip2b\r\n"
				+ "Enter n1:\r\n"
				+ "2\r\n"
				+ "Enter n2:\r\n"
				+ "3\r\n"
				+ "count is:2\r\n"
				+ "sum of prime numbers between 2 and 3 is:5\r\n"
				+ "SLIP 4- Q1\r\n"
				+ "Create an abstract class Order (id, description). Derive two classes\r\n"
				+ "PurchaseOrder and SalesOrder with details of Supplier and Customer.import scala.io.StdIn._\r\n"
				+ "import scala.io.StdIn.{readLine}\r\n"
				+ "object str2\r\n"
				+ "{\r\n"
				+ " def main(args: Array[String])\r\n"
				+ " {\r\n"
				+ " println(\"Enter the first string:\");\r\n"
				+ " var str1=readLine()\r\n"
				+ " println(\"Enter second String:\")\r\n"
				+ " var str2=readLine()\r\n"
				+ " if(str1.contains(str2))\r\n"
				+ " println(\"second string is present in first string\")\r\n"
				+ " else\r\n"
				+ " println(\"not present\")\r\n"
				+ " var newstr = str2.reverse\r\n"
				+ " println(\"string after reversing the occurence:\"+newstr)\r\n"
				+ " }\r\n"
				+ "}\r\n"
				+ "-:OUTPUT:-\r\n"
				+ "arihant@arihant-System-Product-Name:~$ scalac  str2.scala\r\n"
				+ "arihant@arihant-System-Product-Name:~$ scala str2\r\n"
				+ "Enter the first string:\r\n"
				+ "atika\r\n"
				+ "Enter second String:\r\n"
				+ "atika\r\n"
				+ "second string is present in first string\r\n"
				+ "string after reversing the occurence:akita\r\n"
				+ "\r\n"
				+ "Create object of each PurchaseOrder And SalesOrder. Display the\r\n"
				+ "details of all supplier and customers.\r\n"
				+ "(abstract class : 5M derivation : 20 M display : 10M)\r\n"
				+ "import scala.annotation.switch\r\n"
				+ "\r\n"
				+ "abstract class order(id1:Int,desc:String)\r\n"
				+ "{\r\n"
				+ "	var id=id1\r\n"
				+ "	var description=desc\r\n"
				+ "	def orderdetails()\r\n"
				+ "}\r\n"
				+ "\r\n"
				+ "\r\n"
				+ "class purchase(id1:Int,desc:String,v:String,c:String)extends order(id1:Int,desc:String)\r\n"
				+ "{\r\n"
				+ "	var vendor=v\r\n"
				+ "	var customer=c\r\n"
				+ "	\r\n"
				+ "	def orderdetails()\r\n"
				+ "	{\r\n"
				+ "		println(\"_____________**PURCHASE**__________________\")\r\n"
				+ "		println(\"order id\"+id)\r\n"
				+ "		println(\"order descreption\"+description)\r\n"
				+ "		println(\"vendor\"+vendor)\r\n"
				+ "		println(\"customer\"+customer)\r\n"
				+ "	}\r\n"
				+ "\r\n"
				+ "}\r\n"
				+ "\r\n"
				+ "class sales(id1:Int,desc:String,v:String,c:String)extends order(id1:Int,desc:String)\r\n"
				+ "{\r\n"
				+ "	var vendor=v\r\n"
				+ "	var customer=c\r\n"
				+ "	\r\n"
				+ "	def orderdetails()\r\n"
				+ "	{\r\n"
				+ "		println(\"_____________**SALES**__________________\")\r\n"
				+ "		println(\"order id\"+id)\r\n"
				+ "		println(\"order descreption\"+description)\r\n"
				+ "		println(\"vendor\"+vendor)\r\n"
				+ "		println(\"customer\"+customer)\r\n"
				+ "	}\r\n"
				+ "\r\n"
				+ "}\r\n"
				+ "\r\n"
				+ "object order\r\n"
				+ "{\r\n"
				+ "	def main(args:Array[String])\r\n"
				+ "	{\r\n"
				+ "		while(true)\r\n"
				+ "		{\r\n"
				+ "			println(\"Enter your choices\\n1:purchase\\n2:sales\\n3:Exit\")\r\n"
				+ "			val ch:Int=readInt()\r\n"
				+ "			ch match\r\n"
				+ "			{\r\n"
				+ "				case 1=>\r\n"
				+ "					println(\"order Id:\")\r\n"
				+ "					var id=readInt()\r\n"
				+ "					\r\n"
				+ "					println(\"order descreiption:\")\r\n"
				+ "					var desc=readLine()\r\n"
				+ "					\r\n"
				+ "					println(\"Vendor:\")\r\n"
				+ "					var v=readLine()\r\n"
				+ "					\r\n"
				+ "					println(\"Customer\")\r\n"
				+ "					var c=readLine()\r\n"
				+ "					\r\n"
				+ "					var p=new purchase(id,desc,v,c)\r\n"
				+ "					p.orderdetails()\r\n"
				+ "				\r\n"
				+ "				\r\n"
				+ "				case 2=>\r\n"
				+ "					println(\"order Id:\")\r\n"
				+ "					var id=readInt()\r\n"
				+ "					\r\n"
				+ "					println(\"order descreiption:\")\r\n"
				+ "					var desc=readLine()\r\n"
				+ "					\r\n"
				+ "					println(\"Vendor:\")\r\n"
				+ "					var v=readLine()\r\n"
				+ "					\r\n"
				+ "					println(\"Customer\")\r\n"
				+ "					var c=readLine()\r\n"
				+ "				\r\n"
				+ "					var  s=new sales(id,desc,v,c)\r\n"
				+ "					s.orderdetails()\r\n"
				+ "			\r\n"
				+ "				case 3=>\r\n"
				+ "					System.exit(1)\r\n"
				+ "			\r\n"
				+ "			\r\n"
				+ "			}\r\n"
				+ "			\r\n"
				+ "		\r\n"
				+ "		\r\n"
				+ "		}\r\n"
				+ "	\r\n"
				+ "	}\r\n"
				+ "}\r\n"
				+ "-:OUTPUT:-\r\n"
				+ "arihant@arihant-System-Product-Name:~$ scalac order.scala\r\n"
				+ "arihant@arihant-System-Product-Name:~$ scala order\r\n"
				+ "Enter your choices\r\n"
				+ "1:purchase\r\n"
				+ "2:sales\r\n"
				+ "3:Exit\r\n"
				+ "1\r\n"
				+ "order Id:\r\n"
				+ "123\r\n"
				+ "order descreiption:\r\n"
				+ "milk\r\n"
				+ "vendor:\r\n"
				+ "atika\r\n"
				+ "Customer\r\n"
				+ "saniya\r\n"
				+ "_____________**PURCHASE**__________________\r\n"
				+ "order descreiptionmilk\r\n"
				+ "vendoratika\r\n"
				+ "customersaniya\r\n"
				+ "Enter your choices\r\n"
				+ "1:purchase\r\n"
				+ "2:sales\r\n"
				+ "3:Exit\r\n"
				+ "2\r\n"
				+ "order Id:\r\n"
				+ "124\r\n"
				+ "order descreiption:\r\n"
				+ "cake\r\n"
				+ "vendor:\r\n"
				+ "atika\r\n"
				+ "customer\r\n"
				+ "khatija\r\n"
				+ "_____________**SALES**__________________\r\n"
				+ "order id124\r\n"
				+ "order descreiptioncake\r\n"
				+ "vendoratika\r\n"
				+ "customerkhatija\r\n"
				+ "Enter your choices\r\n"
				+ "1:purchase\r\n"
				+ "2:sales\r\n"
				+ "3:Exit\r\n"
				+ "\r\n"
				+ "SLIP-5 Q1\r\n"
				+ "Write a program to create a MAP with empno, empname and deptname. Print details of all employees working in the same department, as “Mr. Joshi” . (create MAP : 10M logic: 10M print :5M)\r\n"
				+ "\r\n"
				+ "import scala.io.StdIn.{readLine,readInt}\r\n"
				+ "import scala.collection.mutable.Map\r\n"
				+ "object Map_p2{\r\n"
				+ "def main(args:Array[String]){\r\n"
				+ "		println(\"Enter no of employees\")\r\n"
				+ "		var n=readInt()\r\n"
				+ "		var map:Map[String,String]=Map[String,String]()\r\n"
				+ "		var empname:String=null\r\n"
				+ "		var deptname:String=null\r\n"
				+ "		println(\"Enter \" + n + \" employee details:\")\r\n"
				+ "		var i=1\r\n"
				+ "		for(i<-1 to n){\r\n"
				+ "			println(\"Enter employee name: \")\r\n"
				+ "			empname=readLine()\r\n"
				+ "			println(\"Enter department\")\r\n"
				+ "			deptname=readLine()\r\n"
				+ "			map+=(empname->deptname)\r\n"
				+ "		}\r\n"
				+ "		println(map)\r\n"
				+ "		\r\n"
				+ "		println(\"Empolyee with Same department as Joshi(\" + map(\"MrJoshi\") + \"):\")\r\n"
				+ "		var j = 1\r\n"
				+ "		for(i<-map.keys)\r\n"
				+ "		{\r\n"
				+ "			if(map(i) == map(\"MrJoshi\"))\r\n"
				+ "			{\r\n"
				+ "  			println(j+\". \"+i)\r\n"
				+ "			  j+=1\r\n"
				+ "			}\r\n"
				+ "  			\r\n"
				+ "		}\r\n"
				+ "	}\r\n"
				+ "}\r\n"
				+ "-:OUTPUT:-\r\n"
				+ "arihant@arihant-System-Product-Name:~$ scalac Map_p2.scala\r\n"
				+ "arihant@arihant-System-Product-Name:~$ scala Map_p2\r\n"
				+ "Enter no of employees\r\n"
				+ "2\r\n"
				+ "Enter 2 employee details:\r\n"
				+ "Enter employee name:\r\n"
				+ "atika\r\n"
				+ "Enter department\r\n"
				+ "bcs\r\n"
				+ "Enter employee name:\r\n"
				+ "MrJoshi\r\n"
				+ "Enter department\r\n"
				+ "bcs\r\n"
				+ "Map(MrJoshi -> bcs, atika -> bcs)\r\n"
				+ "Empolyee with Same department as Joshi(bcs):\r\n"
				+ "1. MrJoshi\r\n"
				+ "2. atika\r\n"
				+ "SLIP 6 Q1\r\n"
				+ "Write a program to merge two sets of integers and calculate sum of all integers in the merged set. Also display largest and smallest element from merged set.\r\n"
				+ "\r\n"
				+ "object Scala_List\r\n"
				+ "{\r\n"
				+ "def main(args: Array[String]): Unit =\r\n"
				+ " {\r\n"
				+ "   //Iterate over a list\r\n"
				+ "   val nums = List(1, 3, 5, 7import scala.io.StdIn._\r\n"
				+ "import scala.io.StdIn.{readLine}\r\n"
				+ "object str2\r\n"
				+ "{\r\n"
				+ " def main(args: Array[String])\r\n"
				+ " {\r\n"
				+ " println(\"Enter the first string:\");\r\n"
				+ " var str1=readLine()\r\n"
				+ " println(\"Enter second String:\")\r\n"
				+ " var str2=readLine()\r\n"
				+ " if(str1.contains(str2))\r\n"
				+ " println(\"second string is present in first string\")\r\n"
				+ " else\r\n"
				+ " println(\"not present\")\r\n"
				+ " var newstr = str2.reverse\r\n"
				+ " println(\"string after reversing the occurence:\"+newstr)\r\n"
				+ " }\r\n"
				+ "}\r\n"
				+ "-:OUTPUT:-\r\n"
				+ "arihant@arihant-System-Product-Name:~$ scalac  str2.scala\r\n"
				+ "arihant@arihant-System-Product-Name:~$ scala str2\r\n"
				+ "Enter the first string:\r\n"
				+ "atika\r\n"
				+ "Enter second String:\r\n"
				+ "atika\r\n"
				+ "second string is present in first string\r\n"
				+ "string after reversing the occurence:akita\r\n"
				+ ", 9, 11, 14,12)\r\n"
				+ "   val numx = List(1, 2, 4, 6, 4, 12, 15,8 )\r\n"
				+ "   println(\"Original list:\")\r\n"
				+ "   println(nums)   \r\n"
				+ "   println(\"Largest number of the said list:\")\r\n"
				+ "   println(nums.max)\r\n"
				+ "   println(\"Smallest number from the said list:\")\r\n"
				+ "   println(nums.min)\r\n"
				+ "   \r\n"
				+ "   println(numx)   \r\n"
				+ "   println(\"Largest number of the said list:\")\r\n"
				+ "   println(numx.max)\r\n"
				+ "   println(\"Smallest number from the said list:\")\r\n"
				+ "   println(numx.min)\r\n"
				+ "\r\n"
				+ "   val nume=nums++numx\r\n"
				+ "   println(\"Merged list:\"+nume)\r\n"
				+ "  }\r\n"
				+ "}\r\n"
				+ "\r\n"
				+ "-:OUTPUT:-\r\n"
				+ "arihant@arihant-System-Product-Name:~$ scalac Scala_List.scala\r\n"
				+ "arihant@arihant-System-Product-Name:~$ scala Scala_List\r\n"
				+ "Original list:\r\n"
				+ "List(1, 3, 5, 7, 9, 11, 14, 12)\r\n"
				+ "Largest number of the said list:\r\n"
				+ "14\r\n"
				+ "Smallest number from the said list:\r\n"
				+ "1\r\n"
				+ "List(1, 2, 4, 6, 4, 12, 15, 8)\r\n"
				+ "Largest number of the said list:\r\n"
				+ "15\r\n"
				+ "Smallest number from the said list:\r\n"
				+ "1\r\n"
				+ "Merged list:List(1, 3, 5, 7, 9, 11, 14, 12, 1, 2, 4, 6, 4, 12, 15, 8)\r\n"
				+ "\r\n"
				+ "\r\n"
				+ "SLIP 7- Q1\r\n"
				+ "Create Lists using five different methods\r\n"
				+ "( Lisp style , Java style, fill, range and tabulate methods).*/\r\n"
				+ "\r\n"
				+ "object Scala_List1\r\n"
				+ "{\r\n"
				+ "  def main(args: Array[String]): Unit =\r\n"
				+ " {\r\n"
				+ "   println(\"Scala List:\")\r\n"
				+ "   println(\"Lisp style:\")\r\n"
				+ "   val lisp_list = 101 :: 226 :: 30 :: Nil\r\n"
				+ "   println(lisp_list)\r\n"
				+ "   println(\"Java style:\")\r\n"
				+ "   val num = List(1,2,3,4,5,6,7)\r\n"
				+ "   println(num)\r\n"
				+ "   println(\"Range List:\")\r\n"
				+ "   val b = List.range(1, 15)\r\n"
				+ "   println(b)\r\n"
				+ "   val c = List.range(0, 20, 2)\r\n"
				+ "   println(c)   \r\n"
				+ "   println(\"Uniform  List:\")\r\n"
				+ "   val d = List.fill(3)(\"PPL\")\r\n"
				+ "   println(d)\r\n"
				+ "   println(\"Tabulated List:\")\r\n"
				+ "   val e = List.tabulate(5)(n => n * n * n)\r\n"
				+ "   println(e)\r\n"
				+ "  }\r\n"
				+ "}\r\n"
				+ "-:OUTPUT:-\r\n"
				+ "arihant@arihant-System-Product-Name:~$ scalac Scala_List1.scala\r\n"
				+ "arihant@arihant-System-Product-Name:~$ scala Scala_List1\r\n"
				+ "Scala List:\r\n"
				+ "Lisp style:\r\n"
				+ "List(101, 226, 30)\r\n"
				+ "Java style:\r\n"
				+ "List(1, 2, 3, 4, 5, 6, 7)\r\n"
				+ "Range List:\r\n"
				+ "List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)\r\n"
				+ "List(0, 2, 4, 6, 8, 10, 12, 14, 16, 18)\r\n"
				+ "Uniform  List:\r\n"
				+ "List(PPL, PPL, PPL)\r\n"
				+ "Tabulated List:\r\n"
				+ "List(0, 1, 8, 27, 64)\r\n"
				+ "SLIP 8 -Q1\r\n"
				+ "//Write a program to calculate sum of all perfect numbers between 1 and 100. Display perfect numbers also.//\r\n"
				+ "\r\n"
				+ "object slip8\r\n"
				+ "{\r\n"
				+ "def main(args:Array[String])\r\n"
				+ "{\r\n"
				+ "var sum=0;\r\n"
				+ "var psum=0;\r\n"
				+ "var perfect=\" \";\r\n"
				+ "for(i<-1 to 100)\r\n"
				+ "{\r\n"
				+ "for(j<-1 to i-1)\r\n"
				+ "{\r\n"
				+ "if(i%j==0)\r\n"
				+ "{\r\n"
				+ "sum=sum+j;\r\n"
				+ "}\r\n"
				+ "}\r\n"
				+ "if(sum==i)\r\n"
				+ "{\r\n"
				+ "psum=psum+i;\r\n"
				+ "perfect=perfect+\" \"+i;\r\n"
				+ "}\r\n"
				+ "sum=0;\r\n"
				+ "}\r\n"
				+ "println(\"perfectNumbers:\"+perfect);\r\n"
				+ "println(\"Sum of Perfect Number:\"+psum);\r\n"
				+ "}\r\n"
				+ "}\r\n"
				+ "\r\n"
				+ "-:OUTPUT:-\r\n"
				+ "arihant@arihant-System-Product-Name:~$ scalac slip8.scala\r\n"
				+ "arihant@arihant-System-Product-Name:~$ scala slip8\r\n"
				+ "perfectNumbers:  6 28\r\n"
				+ "Sum of Perfect Number:34\r\n"
				+ "\r\n"
				+ "SLIP 9 – Q1\r\n"
				+ "Write a program to calculate transpose of a matrix and check if the resultant matrix is lower triangular or not.\r\n"
				+ "object slip4\r\n"
				+ "{\r\n"
				+ "def transposemtr(matrix:Array[Array[Int]],m:Int,n:Int):Array[Array[Int]]=\r\n"
				+ "{\r\n"
				+ "var mtr=Array.ofDim[Int](n,m)\r\n"
				+ "for(i <- 0 until m ; j<-0 until n)\r\n"
				+ "{\r\n"
				+ "mtr(i)(j)=matrix(j)(i)\r\n"
				+ "}\r\n"
				+ "return mtr\r\n"
				+ "}\r\n"
				+ "def lowertriangular(matrix:Array[Array[Int]],m:Int,n:Int):Boolean=\r\n"
				+ "{\r\n"
				+ "for(i <- 0 until m; j <-0 until n)\r\n"
				+ "{\r\n"
				+ "if(i<j)\r\n"
				+ "{\r\n"
				+ "if(matrix(i)(j)!=0) return false\r\n"
				+ "}\r\n"
				+ "}\r\n"
				+ "return true\r\n"
				+ "}\r\n"
				+ "def printmatrix(matrix:Array[Array[Int]],m:Int,n:Int):Unit=\r\n"
				+ "{\r\n"
				+ "for(i<-0 until m)\r\n"
				+ "{\r\n"
				+ "println()\r\n"
				+ "for(j<-0 until n)\r\n"
				+ "{\r\n"
				+ "print(matrix(i)(j)+\"\")\r\n"
				+ "}\r\n"
				+ "}\r\n"
				+ "}\r\n"
				+ "def main(args:Array[String]):Unit=\r\n"
				+ "{\r\n"
				+ "println(\"How many rows you want to enter in matrix 1:\")\r\n"
				+ "var m:Int=scala.io.StdIn.readInt()\r\n"
				+ "println(\"How many columns you want to enter in matrix 1:\")\r\n"
				+ "var n:Int=scala.io.StdIn.readInt()\r\n"
				+ "println(\"Enter elements:\")\r\n"
				+ "var matrix=Array.ofDim[Int](m,n)\r\n"
				+ "for(i<-0 until m; j<-0 until n)\r\n"
				+ "{\r\n"
				+ "matrix(i)(j)=scala.io.StdIn.readInt()\r\n"
				+ "}\r\n"
				+ "var ans=transposemtr(matrix,m,n)\r\n"
				+ "println(\"Transpose is:\")\r\n"
				+ "printmatrix(ans,m,n)\r\n"
				+ "if(lowertriangular(ans,m,n))\r\n"
				+ "{\r\n"
				+ "println(\"transposed matrix is lower triangular.\")\r\n"
				+ "}\r\n"
				+ "else println(\"not lower triangular\")\r\n"
				+ "}\r\n"
				+ "}\r\n"
				+ "  \r\n"
				+ "\r\n"
				+ "1)OUTPUT:-\r\n"
				+ "arihant@arihant-System-Product-Name:~$ scalac slip4.scala\r\n"
				+ "arihant@arihant-System-Product-Name:~$ scala slip4\r\n"
				+ "How many rows you want to enter in matrix 1:\r\n"
				+ "3\r\n"
				+ "How many columns you want to enter in matrix 1:\r\n"
				+ "3\r\n"
				+ "Enter elements:\r\n"
				+ "1\r\n"
				+ "5\r\n"
				+ "5\r\n"
				+ "7\r\n"
				+ "7\r\n"
				+ "8\r\n"
				+ "9\r\n"
				+ "1\r\n"
				+ "8\r\n"
				+ "Transpose is:\r\n"
				+ "\r\n"
				+ "179\r\n"
				+ "571\r\n"
				+ "588not lower triangular\r\n"
				+ "\r\n"
				+ "2)OUTPUT:-\r\n"
				+ "arihant@arihant-System-Product-Name:~$ scalac slip4.scala\r\n"
				+ "arihant@arihant-System-Product-Name:~$ scala slip4\r\n"
				+ "How many rows you want to enter in matrix 1:\r\n"
				+ "3\r\n"
				+ "How many columns you want to enter in matrix 1:\r\n"
				+ "3\r\n"
				+ "Enter elements:\r\n"
				+ "1\r\n"
				+ "0\r\n"
				+ "0\r\n"
				+ "0\r\n"
				+ "1\r\n"
				+ "0\r\n"
				+ "0\r\n"
				+ "0\r\n"
				+ "1\r\n"
				+ "Transpose is:\r\n"
				+ "\r\n"
				+ "100\r\n"
				+ "010\r\n"
				+ "001transposed matrix is lower triangular.\r\n"
				+ "\r\n"
				+ "\r\n"
				+ "\r\n"
				+ "\r\n"
				+ "SLIP 10 –Q1\r\n"
				+ "Write a program to read a character and a string from user and remove first and last occurrence of the character from the string. Display resultant string after reversing its case.\r\n"
				+ "object rev\r\n"
				+ "{\r\n"
				+ "    def convert(c:Char):Char=\r\n"
				+ "    {\r\n"
				+ "        if(c.isLower)\r\n"
				+ "            return (c.toUpper)\r\n"
				+ "        else\r\n"
				+ "            return (c.toLower)\r\n"
				+ "    }  \r\n"
				+ "    def main(args: Array[String])\r\n"
				+ "    {\r\n"
				+ "        println(\"Enter String\")\r\n"
				+ "        var str=scala.io.StdIn.readLine()\r\n"
				+ "        println(\"String After reversing the case:\")\r\n"
				+ "        println(str.map(convert))\r\n"
				+ "       \r\n"
				+ "    }\r\n"
				+ "}\r\n"
				+ "\r\n"
				+ "\r\n"
				+ "SLIP 11- Q1\r\n"
				+ "Design an abstract class Employee with computeSal() as an abstract function. Create two subclasses Worker and Manager. Salary of worker should be calculated on hourly basis of work and Salary of Manager should be calculated on monthly basis with additional incentives. Create five objects each of Worker and Manager class, and display their details. (abstract class and function :10M subclasses:5M salary calculation: 5 M each display:5M)\r\n"
				+ "\r\n"
				+ "import scala.annotation.switch\r\n"
				+ "abstract class Employee(id:Int,name:String)\r\n"
				+ "{\r\n"
				+ "var id1=id\r\n"
				+ "var name1=name\r\n"
				+ "def computeSal()\r\n"
				+ "def disp()\r\n"
				+ "}\r\n"
				+ "\r\n"
				+ "class Worker(id:Int,name:String,Wid:Int,Wname:String,hours:Int,Rate:Int) extends Employee(id,name)\r\n"
				+ "{\r\n"
				+ "var sal=0\r\n"
				+ "var Wid1=Wid\r\n"
				+ "var Wname1=Wname\r\n"
				+ "var hours1=hours\r\n"
				+ "var Rate1=Rate\r\n"
				+ "  def computeSal()\r\n"
				+ "{\r\n"
				+ "  sal=Rate*hours }\r\n"
				+ " def disp()\r\n"
				+ " {\r\n"
				+ "println(\"\\n\\nWorker ID:\"+Wid)\r\n"
				+ "println(\"Worker Name:\"+Wname)\r\n"
				+ "println(\"Number of hours worked:\"+hours)\r\n"
				+ "println(\"(Rate/Hour):\"+Rate)\r\n"
				+ "println(\"Worker Salary is:\"+sal)\r\n"
				+ " }\r\n"
				+ "}\r\n"
				+ "class Manager(id:Int,name:String,Mid:Int,Mname:String,salary:Int,incent:Int) extends Employee(id,name)\r\n"
				+ "{\r\n"
				+ "var sall=0\r\n"
				+ " var Mid1=Mid\r\n"
				+ "var Mname1=Mname\r\n"
				+ " var salary1=salary\r\n"
				+ " var incent1=incent\r\n"
				+ "\r\n"
				+ "def computeSal()\r\n"
				+ "{\r\n"
				+ "sall=salary+incent\r\n"
				+ " }\r\n"
				+ " def disp()\r\n"
				+ " {\r\n"
				+ "println(\"Manager ID:\"+Mid)\r\n"
				+ "println(\"Manager Name:\"+Mname)\r\n"
				+ "println(\"Manager Monthly Salary:\"+salary)\r\n"
				+ "println(\"Manager Incentives:\"+incent)\r\n"
				+ "println(\"\\n Manager Total Salary is:\"+sall)\r\n"
				+ "}\r\n"
				+ "}\r\n"
				+ "\r\n"
				+ "object Employee\r\n"
				+ "{\r\n"
				+ "def main(arg:Array[String])\r\n"
				+ "{\r\n"
				+ "println(\"\\nEnter Employee ID:\")\r\n"
				+ "var id=readInt()\r\n"
				+ "println(\"\\nEnter Employee Name:\")\r\n"
				+ "var name=readLine()\r\n"
				+ "println(\"\\n Employee Id:\"+id)\r\n"
				+ " println(\"\\n Employee Name:\"+name)\r\n"
				+ "while(true)\r\n"
				+ " {\r\n"
				+ " println(\"Enter your choice:\\n1:Worker\\n2.Manager\\n3:Exit\")\r\n"
				+ "val ch:Int=readInt()\r\n"
				+ "ch match\r\n"
				+ " {\r\n"
				+ " case 1=>\r\n"
				+ "println(\"Enter Worker ID:\")\r\n"
				+ " var Wid=readInt()\r\n"
				+ "println(\"Enter Worker Name:\")\r\n"
				+ " var Wname=import scala.annotation.switch\r\n"
				+ "abstract class Employee(id:Int,name:String)\r\n"
				+ "{\r\n"
				+ "var id1=id\r\n"
				+ "var name1=name\r\n"
				+ "def computeSal()\r\n"
				+ "def disp()\r\n"
				+ "}\r\n"
				+ "\r\n"
				+ "class Worker(id:Int,name:String,Wid:Int,Wname:String,hours:Int,Rate:Int) extends Employee(id,name)\r\n"
				+ "{\r\n"
				+ "var sal=0\r\n"
				+ "var Wid1=Wid\r\n"
				+ "var Wname1=Wname\r\n"
				+ "var hours1=hours\r\n"
				+ "var Rate1=Rate\r\n"
				+ "  def computeSal()\r\n"
				+ "{\r\n"
				+ "  sal=Rate*hours }\r\n"
				+ " def disp()\r\n"
				+ " {\r\n"
				+ "println(\"\\n\\nWorker ID:\"+Wid)\r\n"
				+ "println(\"Worker Name:\"+Wname)\r\n"
				+ "println(\"Number of hours worked:\"+hours)\r\n"
				+ "println(\"(Rate/Hour):\"+Rate)\r\n"
				+ "println(\"Worker Salary is:\"+sal)\r\n"
				+ " }\r\n"
				+ "}\r\n"
				+ "class Manager(id:Int,name:String,Mid:Int,Mname:String,salary:Int,incent:Int) extends Employee(id,name)\r\n"
				+ "{\r\n"
				+ "var sall=0\r\n"
				+ " var Mid1=Mid\r\n"
				+ "var Mname1=Mname\r\n"
				+ " var salary1=salary\r\n"
				+ " var incent1=incent\r\n"
				+ "\r\n"
				+ "def computeSal()\r\n"
				+ "{\r\n"
				+ "sall=salary+incent\r\n"
				+ " }\r\n"
				+ " def disp()\r\n"
				+ " {\r\n"
				+ "println(\"Manager ID:\"+Mid)\r\n"
				+ "println(\"Manager Name:\"+Mname)\r\n"
				+ "println(\"Manager Monthly Salary:\"+salary)\r\n"
				+ "println(\"Manager Incentives:\"+incent)\r\n"
				+ "println(\"\\n Manager Total Salary is:\"+sall)\r\n"
				+ "}\r\n"
				+ "}\r\n"
				+ "\r\n"
				+ "object Employee\r\n"
				+ "{\r\n"
				+ "def main(arg:Array[String])\r\n"
				+ "{\r\n"
				+ "println(\"\\nEnter Employee ID:\")\r\n"
				+ "var id=readInt()\r\n"
				+ "println(\"\\nEnter Employee Name:\")\r\n"
				+ "var name=readLine()\r\n"
				+ "println(\"\\n Employee Id:\"+id)\r\n"
				+ " println(\"\\n Employee Name:\"+name)\r\n"
				+ "while(true)\r\n"
				+ " {\r\n"
				+ " println(\"Enter your choice:\\n1:Worker\\n2.Manager\\n3:Exit\")\r\n"
				+ "val ch:Int=readInt()\r\n"
				+ "ch match\r\n"
				+ " {\r\n"
				+ " case 1=>\r\n"
				+ "println(\"Enter Worker ID:\")\r\n"
				+ " var Wid=readInt()\r\n"
				+ "println(\"Enter Worker Name:\")\r\n"
				+ " var Wname=readLine()\r\n"
				+ "println(\"Enter Number of hours worked:\")\r\n"
				+ "var hours=readInt()\r\n"
				+ "println(\"Enter (Rate/Hour):\")\r\n"
				+ " var Rate=readInt()\r\n"
				+ "var wo=new Worker(id,name,Wid,Wname,hours,Rate)\r\n"
				+ "wo.computeSal()\r\n"
				+ " wo.disp()\r\n"
				+ "  case 2=>\r\n"
				+ "println(\"Enter Manager ID:\")\r\n"
				+ "var Mid=readInt()\r\n"
				+ "println(\"Enter Manager Name:\")\r\n"
				+ "var Mname=readLine()\r\n"
				+ "println(\"Enter Manager Salary:\")\r\n"
				+ " var salary=readInt()\r\n"
				+ "println(\"Enter Manager Incentives:\")\r\n"
				+ "var incent=readInt()\r\n"
				+ " var ma=new Manager(id,name,Mid,Mname,salary,incent)\r\n"
				+ " ma.computeSal()\r\n"
				+ " ma.disp()\r\n"
				+ " case 3=>System.exit(1)\r\n"
				+ "}\r\n"
				+ "}\r\n"
				+ " }\r\n"
				+ "}readLine()\r\n"
				+ "println(\"Enter Number of hours worked:\")\r\n"
				+ "var hours=readInt()\r\n"
				+ "println(\"Enter (Rate/Hour):\")\r\n"
				+ " var Rate=readInt()\r\n"
				+ "var wo=new Worker(id,name,Wid,Wname,hours,Rate)\r\n"
				+ "wo.computeSal()\r\n"
				+ " wo.disp()\r\n"
				+ "  case 2=>\r\n"
				+ "println(\"Enter Manager ID:\")\r\n"
				+ "var Mid=readInt()\r\n"
				+ "println(\"Enter Manager Name:\")\r\n"
				+ "var Mname=readLine()\r\n"
				+ "println(\"Enter Manager Salary:\")\r\n"
				+ " var salary=readInt()\r\n"
				+ "println(\"Enter Manager Incentives:\")\r\n"
				+ "var incent=readInt()\r\n"
				+ " var ma=new Manager(id,name,Mid,Mname,salary,incent)\r\n"
				+ " ma.computeSal()\r\n"
				+ " ma.disp()\r\n"
				+ " case 3=>System.exit(1)\r\n"
				+ "}\r\n"
				+ "}\r\n"
				+ " }\r\n"
				+ "}\r\n"
				+ "-:OUTPUT:-\r\n"
				+ "arihant@arihant-System-Product-Name:~$ scalac Employee.scala\r\n"
				+ "arihant@arihant-System-Product-Name:~$ scala Employee\r\n"
				+ "\r\n"
				+ "Enter Employee ID:\r\n"
				+ "123\r\n"
				+ "\r\n"
				+ "Enter Employee Name:\r\n"
				+ "atika\r\n"
				+ "\r\n"
				+ " Employee Id:123\r\n"
				+ "\r\n"
				+ " Employee Name:atika\r\n"
				+ "Enter your choice:\r\n"
				+ "1:Worker\r\n"
				+ "2.Manager\r\n"
				+ "3:Exit\r\n"
				+ "1\r\n"
				+ "Enter Worker ID:\r\n"
				+ "45\r\n"
				+ "Enter Worker Name:\r\n"
				+ "saniya\r\n"
				+ "Enter Number of hours worked:\r\n"
				+ "3\r\n"
				+ "Enter (Rate/Hour):\r\n"
				+ "2\r\n"
				+ "\r\n"
				+ "\r\n"
				+ "Worker ID:45\r\n"
				+ "Worker Name:saniya\r\n"
				+ "Number of hours worked:3\r\n"
				+ "(Rate/Hour):2\r\n"
				+ "Worker Salary is:6\r\n"
				+ "Enter your choice:\r\n"
				+ "1:Worker\r\n"
				+ "2.Manager\r\n"
				+ "3:Exit\r\n"
				+ "2\r\n"
				+ "Enter Manager ID:\r\n"
				+ "14\r\n"
				+ "Enter Manager Name:\r\n"
				+ "nikhat\r\n"
				+ "Enter Manager Salary:\r\n"
				+ "500000\r\n"
				+ "Enter Manager Incentives:\r\n"
				+ "500\r\n"
				+ "Manager ID:14\r\n"
				+ "Manager Name:nikhat\r\n"
				+ "Manager Monthly Salary:500000\r\n"
				+ "Manager Incentives:500\r\n"
				+ "\r\n"
				+ " Manager Total Salary is:500500\r\n"
				+ "Enter your choice:\r\n"
				+ "1:Worker\r\n"
				+ "2.Manager\r\n"
				+ "3:Exit\r\n"
				+ "3\r\n"
				+ "SLIP 12 – Q1\r\n"
				+ "Write a program to create a list of 1 to 100 numbers. Create second list from first list selecting numbers which are perfect square. Display it. (create first list: 10M find perfect square : 10M create second list :5 M display : 5M)\r\n"
				+ "\r\n"
				+ "object List5 {\r\n"
				+ "   def main(args: Array[String]) {\r\n"
				+ "    \r\n"
				+ "	  val list1 = List.tabulate(50)(n => 2*n+3 )\r\n"
				+ "      println( \"list1 : \" + list1  )\r\n"
				+ "      val list2 = List.tabulate(5)(n => n * 5)\r\n"
				+ "      println(\"list2: \"+list2)\r\n"
				+ "   }\r\n"
				+ "}\r\n"
				+ "-:OUTPUT:-\r\n"
				+ "arihant@arihant-System-Product-Name:~$ scalac List5.scala\r\n"
				+ "arihant@arihant-System-Product-Name:~$ scala List5\r\n"
				+ "list1 : List(3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101)\r\n"
				+ "list2: List(0, 5, 10, 15, 20)\r\n"
				+ "SLIP 13 – Q1\r\n"
				+ "\r\n"
				+ "Write user defined functions to reverse the case of a given string and call the function using MAP\r\n"
				+ "// Creating object  \r\n"
				+ "object GGF  \r\n"
				+ "{  \r\n"
				+ "// Main method  \r\n"
				+ "def main(args:Array[String])  \r\n"
				+ "{  \r\n"
				+ "// Creating a map  \r\n"
				+ "val m1 = Map(3 -> \"geeks\", 4 -> \"for\", 2 -> \"cs\")  \r\n"
				+ "// reversing key:value pairs  \r\n"
				+ "val reverse = for ((k, v) <- m1) yield (v, k)\r\n"
				+ "// Displays output  \r\n"
				+ "println(reverse)  \r\n"
				+ "}  \r\n"
				+ "}\r\n"
				+ "-:OUTPUT:-\r\n"
				+ "arihant@arihant-System-Product-Name:~$ scalac GGF.scala\r\n"
				+ "arihant@arihant-System-Product-Name:~$ scala GGF\r\n"
				+ "Map(geeks -> 3, for -> 4, cs -> 2)\r\n"
				+ "SLIP 14 Q1\r\n"
				+ "Write a program to create two sets of strings and find common strings between them. Merge sets after removing common strings. Display resultant set.\r\n"
				+ "object slip5\r\n"
				+ "{\r\n"
				+ "def main(args:Array[String])\r\n"
				+ "{\r\n"
				+ "var set1=scala.collection.mutable.Set[Int]()\r\n"
				+ "var set2=scala.collection.mutable.Set[Int]()\r\n"
				+ "var ele=0\r\n"
				+ "println(\"Enter number of elements set1:\")\r\n"
				+ "var n:Int=scala.io.StdIn.readInt()\r\n"
				+ "println(\"Enter elements in set1:\")\r\n"
				+ "for(i <- 1 to n)\r\n"
				+ "{\r\n"
				+ "ele=scala.io.StdIn.readInt()\r\n"
				+ "set1+=ele\r\n"
				+ "}\r\n"
				+ "println(\"Enter number of elements in set2:\")\r\n"
				+ "n=scala.io.StdIn.readInt()\r\n"
				+ "\r\n"
				+ "println(\"Enter elements in set2:\")\r\n"
				+ "for(i <- 1 to n)\r\n"
				+ "{\r\n"
				+ "ele=scala.io.StdIn.readInt()\r\n"
				+ "set2+=ele\r\n"
				+ "}\r\n"
				+ "println(\"elements is set1 are:\"+set1)\r\n"
				+ "println(\"elements in set2 are:\"+set2)\r\n"
				+ "var common=set1.intersect(set2)\r\n"
				+ "println(\"Common elements are:\"+common)\r\n"
				+ "var set5=set1.union(set2)&~(common)\r\n"
				+ "		println(\"After removal of common string the set is:\"+set5)\r\n"
				+ "	}\r\n"
				+ "}\r\n"
				+ "\r\n"
				+ "\r\n"
				+ "OUTPUT:-\r\n"
				+ "arihant@arihant-System-Product-Name:~$ scalac slip5.scala\r\n"
				+ "arihant@arihant-System-Product-Name:~$ scala slip5\r\n"
				+ "Enter number of elementsin set1:\r\n"
				+ "2\r\n"
				+ "Enter elements in set1:\r\n"
				+ "1\r\n"
				+ "3\r\n"
				+ "Enter number of elementsin set2:\r\n"
				+ "3\r\n"
				+ "Enter elements in set2:\r\n"
				+ "1\r\n"
				+ "2\r\n"
				+ "5\r\n"
				+ "elements is set1 are:Set(1, 3)\r\n"
				+ "elements in set2 are:Set(1, 5, 2)\r\n"
				+ "Common elements are:Set(1)\r\n"
				+ "After removal of common string the set is:Set(5, 2, 3)\r\n"
				+ "\r\n"
				+ "SLIP 15 Q1\r\n"
				+ "Define a class SavingAccount (accNo, name, balance, minBalance).\r\n"
				+ "Define appropriate constructors and operations withdraw(), deposit(),\r\n"
				+ "viewBalance(). Create an array of SavingAccount objects and\r\n"
				+ "perform operations and display them.\r\n"
				+ "(define class:5M constructors: 10M operations: 5 M each)\r\n"
				+ "\r\n"
				+ "\r\n"
				+ "class SavingAcc(ano:Int,n:String,bal:Int)\r\n"
				+ "{\r\n"
				+ "    var accNo=ano\r\n"
				+ "    var name=n\r\n"
				+ "    var balance=bal\r\n"
				+ "    var minbalance:Int=0\r\n"
				+ "   \r\n"
				+ "    def this(ano:Int,n:String,b:Int,mb:Int)\r\n"
				+ "    {\r\n"
				+ "        this(ano,n,b)\r\n"
				+ "        this.minbalance=mb\r\n"
				+ "    }\r\n"
				+ "   \r\n"
				+ "    def viewBal()\r\n"
				+ "    {\r\n"
				+ "        println(\"Account Num:\"+accNo)\r\n"
				+ "        println(\"Owner name:\"+name)\r\n"
				+ "        println(\"Balance:\"+balance)\r\n"
				+ "    }\r\n"
				+ "   \r\n"
				+ "    def withdraw()\r\n"
				+ "    {\r\n"
				+ "        println(\"Enter amount to withdraw\")\r\n"
				+ "        var wamt=readInt()\r\n"
				+ "        if(balance-wamt>minbalance)\r\n"
				+ "        {\r\n"
				+ "            balance-=wamt\r\n"
				+ "            println(\"Remaining balance:\"+balance)\r\n"
				+ "        }\r\n"
				+ "        else\r\n"
				+ "            println(\"Insufficient Fund In Account\")\r\n"
				+ "    }\r\n"
				+ "   \r\n"
				+ "    def deposite()\r\n"
				+ "    {\r\n"
				+ "        println(\"Amount to deposite:\")\r\n"
				+ "        val damt=readInt()\r\n"
				+ "        balance+=damt\r\n"
				+ "        println(\"New Balance:\"+balance)\r\n"
				+ "    }  \r\n"
				+ "}\r\n"
				+ "\r\n"
				+ "object account\r\n"
				+ "{\r\n"
				+ "    def main(args:Array[String])\r\n"
				+ "    {\r\n"
				+ "       \r\n"
				+ "        println(\"New account?1/0\")\r\n"
				+ "        var ch=readInt()\r\n"
				+ "        println(\"*****:\"+ch)\r\n"
				+ "        while(ch==1)\r\n"
				+ "        {\r\n"
				+ "            println(\"Enter account number:\")\r\n"
				+ "            val ano=readInt()\r\n"
				+ "            println(\"Enter Acount Owner name:\")\r\n"
				+ "            var name=readLine()\r\n"
				+ "            println(\"Enter account balance\")\r\n"
				+ "            var bal=readInt()\r\n"
				+ "            var newacc=new SavingAcc(ano,name,bal,500)\r\n"
				+ "            newacc.viewBal()\r\n"
				+ "            newacc.deposite()\r\n"
				+ "            newacc.viewBal()\r\n"
				+ "            newacc.withdraw()    \r\n"
				+ "            println(\"New account?1/0\")\r\n"
				+ "            var ch=readInt()\r\n"
				+ "            if(ch==0)\r\n"
				+ "                System.exit(0)\r\n"
				+ "        }  \r\n"
				+ "       \r\n"
				+ "    }\r\n"
				+ "}\r\n"
				+ "\r\n"
				+ "SLIP 16 –Q1\r\n"
				+ "Write a program to sort a matrix using insertion sort and check if the resultant matrix is upper triangular or not\r\n"
				+ "\r\n"
				+ "object UpperTrang {\r\n"
				+ "	def main(args: Array[String]): Unit =\r\n"
				+ "	{\r\n"
				+ "\r\n"
				+ "    var A=Array.ofDim[Int](100,100)\r\n"
				+ "    println(\"Enter no. of rows :: \")\r\n"
				+ "    var m= scala.io.StdIn.readInt()\r\n"
				+ "        println(\"\\nEnter no. of cols :: \")\r\n"
				+ "    var n = scala.io.StdIn.readInt()\r\n"
				+ "        printf(\"\\nEnter values to the matrix :: \\n\")\r\n"
				+ "        for (i <- 0 to m-1)\r\n"
				+ "        {\r\n"
				+ "            for (j <- 0 to n-1)\r\n"
				+ "            {\r\n"
				+ "              A(i)(j)=scala.io.StdIn.readInt()\r\n"
				+ "              println(A(i)(j)+\" \");\r\n"
				+ "                 \r\n"
				+ "            }\r\n"
				+ "        }\r\n"
				+ " \r\n"
				+ "    println(\"\\nThe given matrix is ::\");\r\n"
				+ " \r\n"
				+ "        for (i <- 0 to m-1)\r\n"
				+ "        {\r\n"
				+ "            for (j <- 0 to n-1)\r\n"
				+ "            {\r\n"
				+ "                print(A(i)(j)+\"\\t\");\r\n"
				+ "            }\r\n"
				+ "            print(\"\\n\\n\");\r\n"
				+ "        }\r\n"
				+ "   var isUpper = 1;\r\n"
				+ "    for(row<-0 to m-1)\r\n"
				+ "    {\r\n"
				+ "        for(col<-0 to n-1)\r\n"
				+ "        {\r\n"
				+ "            if(col<row && A(row)(col)!=0)\r\n"
				+ "            {\r\n"
				+ "                isUpper = 0;\r\n"
				+ "            }\r\n"
				+ "        }\r\n"
				+ "    }\r\n"
				+ "    if(isUpper==1)\r\n"
				+ "    {\r\n"
				+ "        println(\"\\nThis is a Upper triangular matrix\")\r\n"
				+ "        for(row<-0 to m-1)\r\n"
				+ "        {\r\n"
				+ "            for(col<-0 to n-1)\r\n"
				+ "            {\r\n"
				+ "                if(A(row)(col)!= 0)\r\n"
				+ "                {\r\n"
				+ "                    print(A(row)(col)+\"\\t\");\r\n"
				+ "                }\r\n"
				+ "                else\r\n"
				+ "                {\r\n"
				+ "                    print(\"\\t\");\r\n"
				+ "                }\r\n"
				+ " \r\n"
				+ "            }\r\n"
				+ "        print(\"\\n\\n\");\r\n"
				+ "        }\r\n"
				+ "    }\r\n"
				+ "    else\r\n"
				+ "    {\r\n"
				+ "        print(\"\\nThis is Not a Upper triangular matrix.\");\r\n"
				+ "    }\r\n"
				+ " \r\n"
				+ "  }\r\n"
				+ "}\r\n"
				+ "\r\n"
				+ "SLIP 17 – Q1\r\n"
				+ "Create abstract class Shape with abstract functions volume() and\r\n"
				+ "display(). Extend two classes Cube and Cylinder from it. Create\r\n"
				+ "objects of Cube and Cylinder, Calculate volume of each and displayit.\r\n"
				+ "(create abstract class :5M extend classes : 5M functions: 5M each\r\n"
				+ "display: 10M)\r\n"
				+ "import scala.annotation.switch\r\n"
				+ "abstract class shape()\r\n"
				+ "{\r\n"
				+ "    def volume()\r\n"
				+ "    def display()\r\n"
				+ "}\r\n"
				+ "class cube(side:Int) extends shape()\r\n"
				+ "{\r\n"
				+ "    var s:Int=side\r\n"
				+ "    var v:Int=0\r\n"
				+ "    def volume()\r\n"
				+ "    {\r\n"
				+ "        v=s*s*s\r\n"
				+ "    }\r\n"
				+ "    def display()\r\n"
				+ "    {\r\n"
				+ "        println(\"volume is:\"+v)\r\n"
				+ "    }\r\n"
				+ "}\r\n"
				+ "class cylinder(radius:Int,height:Int) extends shape()\r\n"
				+ "{\r\n"
				+ "    var r:Int=radius\r\n"
				+ "    var h:Int=height\r\n"
				+ "    var v:Float=0.0f\r\n"
				+ "    var pi=3.14f\r\n"
				+ "    def volume()\r\n"
				+ "    {\r\n"
				+ "         v=pi*(r*r*h)\r\n"
				+ "    }\r\n"
				+ "    def display()\r\n"
				+ "    {\r\n"
				+ "        println(\"volume of cylinder is:\"+v)\r\n"
				+ "    }\r\n"
				+ "}\r\n"
				+ "object slip10\r\n"
				+ "{\r\n"
				+ "    def main(args:Array[String]):Unit=\r\n"
				+ "    {\r\n"
				+ "        println(\"Enter your choice:1)cube 2)cylinder 3)exit:\")\r\n"
				+ "        var ch:Int=scala.io.StdIn.readInt()\r\n"
				+ "        ch match\r\n"
				+ "        {\r\n"
				+ "            case 1 => println(\"Enter side:\")\r\n"
				+ "                    var s:Int=scala.io.StdIn.readInt()\r\n"
				+ "                    var c=new cube(s)\r\n"
				+ "                    c.volume()\r\n"
				+ "                    c.display()\r\n"
				+ "            case 2 => println(\"Enter raadius:\")\r\n"
				+ "                      var r:Int=scala.io.StdIn.readInt()\r\n"
				+ "                      println(\"Enter height:\")\r\n"
				+ "                      var h:Int=scala.io.StdIn.readInt()\r\n"
				+ "                      var cy=new cylinder(r,h)\r\n"
				+ "                        cy.volume()\r\n"
				+ "                        cy.display()\r\n"
				+ "            case  3 => System.exit(1)\r\n"
				+ "        }\r\n"
				+ "    }\r\n"
				+ "}\r\n"
				+ "\r\n"
				+ "SLIP 18 – Q1\r\n"
				+ "Create array of strings and read a new string from user. Display all the srings from the array that contain the new string. (accept array and string: 10M check string logic : 10M display 10M)\r\n"
				+ "/ Scala program to adding elements in an array  \r\n"
				+ "// of the string as name.\r\n"
				+ "\r\n"
				+ "object GFG\r\n"
				+ "{\r\n"
				+ "\r\n"
				+ "    // Main method\r\n"
				+ "\r\n"
				+ "    def main(args: Array[String])  \r\n"
				+ "\r\n"
				+ "    {\r\n"
				+ "\r\n"
				+ "        var name = new Array[String](4)\r\n"
				+ "        // Adding element in an array  \r\n"
				+ "\r\n"
				+ "        name(0)=\"gfg\"\r\n"
				+ "\r\n"
				+ "        name(1)=\"geeks\"\r\n"
				+ "\r\n"
				+ "        name(2)=\"GeeksQuize\"\r\n"
				+ "\r\n"
				+ "        name(3)=\"geeksforgeeks\"\r\n"
				+ "\r\n"
				+ "        println(\"After adding array elements : \")\r\n"
				+ "        for ( m1 <-name )\r\n"
				+ "\r\n"
				+ "        {\r\n"
				+ "\r\n"
				+ "            println(m1 )\r\n"
				+ "\r\n"
				+ "        }\r\n"
				+ "\r\n"
				+ "      \r\n"
				+ "\r\n"
				+ "    }\r\n"
				+ "}\r\n"
				+ "\r\n"
				+ "SLIP 19-Q1\r\n"
				+ "Create a list of 10 random numbers. Create another list from members of first list using function 3n2+4n+6. Display second list in ascending order. (random numbers list: 10M create list with function: 10M display with ascending order : 10M)\r\n"
				+ "\r\n"
				+ "object GFG\r\n"
				+ "{\r\n"
				+ "    // Main method\r\n"
				+ "    def main(args: Array[String])\r\n"
				+ "    {\r\n"
				+ "        // variable declaration (assigning 5 to a)\r\n"
				+ "       var a = 1\r\n"
				+ " \r\n"
				+ "        // loop execution\r\n"
				+ "          while (a<11)\r\n"
				+ "        {\r\n"
				+ "          val r = new scala.util.Random\r\n"
				+ "            \r\n"
				+ "            println(\"This is random_no :\" +r.nextInt(30))\r\n"
				+ "            println( \"This is calculated :\"+ 3*r.nextInt(30)*r.nextInt(30)+4*r.nextInt(30)+6)\r\n"
				+ "            a=a+1;\r\n"
				+ "        }\r\n"
				+ "    }\r\n"
				+ "}\r\n"
				+ "SLIP 20 – Q1\r\n"
				+ "Create a MAP for storing the following information about 5 students, where each Student is described with Rollno, Name and marks in two subjects. Display Student information with highest percentage.(HERE U HAVE TO ADD PERCENTAGE  AND SUBJECTS )\r\n"
				+ "object Slip1\r\n"
				+ "{\r\n"
				+ "def main(a:Array[String])\r\n"
				+ "	{\r\n"
				+ "		var map=Map(1->\"mayuri\",2->\"mayuri\",3->\"Chinmay\",4->\"mayuri\",5->\"mayi\");	\r\n"
				+ "		for((k1,v1) <- map)\r\n"
				+ "		{		\r\n"
				+ "				for((k2,v2)<-map)\r\n"
				+ "				{\r\n"
				+ "					if(v1==v2 && k1!=k2)\r\n"
				+ "					{\r\n"
				+ "						\r\n"
				+ "		println(\" Roll No: \"+ k1+\" FirstName:\"+v1);\r\n"
				+ "						\r\n"
				+ "	}\r\n"
				+ "}\r\n"
				+ "						\r\n"
				+ "			\r\n"
				+ "		}\r\n"
				+ "						\r\n"
				+ "\r\n"
				+ "	}\r\n"
				+ "\r\n"
				+ "}\r\n"
				+ "\r\n"
				+ "\r\n"
				+ "\r\n"
				+ "finish"
				);

	}

}
